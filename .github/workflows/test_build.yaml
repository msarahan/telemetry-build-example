name: pr

on:
  workflow_dispatch:
    inputs:
      traces-exporters:
        description: 'OTEL exporter(s) to use for traces. Comma-separated if more than one.'
      metrics-exporters:
        description: 'OTEL exporter(s) to use for metrics. Comma-separated if more than one.'
      logs-exporters:
        description: 'OTEL exporter(s) to use for logs. Comma-separated if more than one.'
      default-endpoint:
        description: 'Remote destination for all data types. This is superseded by more specific data type endpoint specifications below.'
        default: https://136.49.91.190:4318
        required: false
      traces-endpoint:
        description: 'Remote destination for traces. Does not apply to all exporters (e.g. console). Note port and protocol (grpc vs https)'
        required: false
      metrics-endpoint:
        description: 'Remote destination for metrics. Does not apply to all exporters (e.g. console). Note port and protocol (grpc vs https)'
        required: false
      logs-endpoint:
        description: 'Remote destination for logs. Does not apply to all exporters (e.g. console). Note port and protocol (grpc vs https)'
        required: false

env:
    otel-service-name: rapids-build-test
    # This must be set for telemetry to be enabled. See rapids-otel-wrap script in gha-tools repo.
    OTEL_EXPORTER_OTLP_ENDPOINT: "${{ inputs.default-endpoint }}"
    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "${{ inputs.traces-endpoint }}"
    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: "${{ inputs.metrics-endpoint }}"
    OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "${{ inputs.logs-endpoint }}"
    OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf"
    OTEL_EXPORTER_OTLP_HEADERS: ${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}
    OTEL_EXPORTER_OTLP_CERTIFICATE: "/tmp/certs/ca.crt"
    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: "/tmp/certs/client.crt"
    OTEL_EXPORTER_OTLP_CLIENT_KEY: "/tmp/certs/client.key"
    # These default to "console", so only need to be set for other values
    RAPIDS_JOB_ID: "Software Engineer"
    RAPIDS_OTEL_TRACES_EXPORTER: "${{ inputs.traces-exporters || 'otlp' }}"
    RAPIDS_OTEL_METRICS_EXPORTER: "${{ inputs.metrics-exporters || 'otlp' }}"
    RAPIDS_OTEL_LOGS_EXPORTER: "${{ inputs.logs-exporters || 'otlp' }}"

jobs:
  build:
    name: "Super Duper Build Job"
    runs-on: ubuntu-latest
    container:
      image: rapidsai/ci-conda
    steps:
      - name: Checkout code repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Install OpenTelemetry instrumentation
        run: |
          pip install opentelemetry-distro[otlp] opentelemetry-exporter-prometheus
          # curl -L -o otel-cli-amd64.deb https://github.com/equinix-labs/otel-cli/releases/download/v0.4.5/otel-cli_0.4.5_linux_amd64.deb
          # dpkg -i otel-cli-amd64.deb
          git clone -b add-conda-build-instrumentation https://github.com/msarahan/opentelemetry-python-contrib
          pip install -e ./opentelemetry-python-contrib/instrumentation/opentelemetry-instrumentation-conda-build
          opentelemetry-bootstrap -a install
      - name: Download gha-tools with git clone
        run: |
            git clone https://github.com/msarahan/gha-tools.git -b add-telemetry-traceparent-scripts /tmp/gha-tools
            echo "/tmp/gha-tools/tools" >> "${GITHUB_PATH}"

      - name: Get job traceparent
        uses: msarahan/shared-actions/telemetry-traceparent@telemetry-summarize
        id: job-traceparent
      - name: Create job root trace
        run: |
           otel-cli span \
                --force-trace-id "$(cut -d'-' -f2 <<<"${{steps.job-traceparent.outputs.traceparent}}")" \
                --force-span-id "$(cut -d'-' -f3 <<<"${{steps.job-traceparent.outputs.traceparent}}")" \
                --name "some dumb name"


      - name: Write certificate files
        run: |
          mkdir -p /tmp/certs
          cat << EOF > /tmp/certs/ca.crt
          ${{ secrets.OTEL_EXPORTER_OTLP_CERTIFICATE }}
          EOF
          cat << EOF > /tmp/certs/client.crt
          ${{ secrets.OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE }}
          EOF
          cat << EOF > /tmp/certs/client.key
          ${{ secrets.OTEL_EXPORTER_OTLP_CLIENT_KEY }}
          EOF

      - name: Run build
        env:
            TRACEPARENT: ${{ steps.job-traceparent.outputs.traceparent }}
            RAPIDS_OTEL_SERVICE_NAME: "${{ env.otel-service-name }}"
        run: |
            rapids-conda-retry build click-feedstock

      - name: Test OTel export of job JSON
        uses: msarahan/shared-actions/telemetry-summarize@telemetry-summarize
        with:
            endpoint: ${{ inputs.default-endpoint }}
            traceparent: ${{ steps.job-traceparent.outputs.traceparent }}
